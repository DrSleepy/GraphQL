# Types
type User {
  displayName: String
  age: Int
  email: String
  gender: String
  preferences: Preference
  chatlist: Chatlist
  blocklist: Blocklist
}

type Chatlist {
  # _id: ID
  privateChats: [PrivateChat]
}

type Blocklist {
  # _id: ID
  users: [ID]
}

type Preference {
  minAge: Int
  maxAge: Int
  gender: String
}

type PrivateChat {
  user1: User
  user2: User
  messages: [Message]
}

type Message {
  time: String
  text: String
  user: User
}

type AuthResponse {
  ok: Boolean
  errors: [Error]
  user: User
}

type Error {
  path: [String] # Is array to match Joi errors
  message: String
}

# Inputs
input RegisterInput {
  email: String!
  password: String!
  confirmPassword: String!
  gender: String!
}

input LoginInput {
  email: String!
  password: String!
}

# Queries and Mutations
type Query {
  myProfile: User
}

type Mutation {
  register(registerDetails: RegisterInput): AuthResponse
  login(loginDetails: LoginInput): AuthResponse
  logout: Boolean
  findNewChat: PrivateChat
}
